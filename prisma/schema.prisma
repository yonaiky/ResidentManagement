// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user") // admin, manager, user
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resident {
  id              Int           @id @default(autoincrement())
  name            String
  lastName        String
  cedula          String        @unique
  noRegistro      String?       @unique @map("NoRegistro")
  phone           String
  email           String?
  address         String
  paymentStatus   String        @default("pending")
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tokens          Token[]
  notifications   Notification[]
  payments        Payment[]
}

model Token {
  id              Int           @id @default(autoincrement())
  name            String
  status          String        @default("active")
  paymentStatus   String        @default("pending")
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  residentId      Int
  resident        Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Payment {
  id              Int           @id @default(autoincrement())
  amount          Float
  status          String        @default("completed")
  paymentDate     DateTime      @default(now())
  dueDate         DateTime      // Fecha de vencimiento del mes
  month           Int           @default(1)
  year            Int           @default(2024)
  residentId      Int
  resident        Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Notification {
  id              Int           @id @default(autoincrement())
  message         String
  type            String        @default("info")
  read            Boolean       @default(false)
  residentId      Int
  resident        Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
}

model CompanyInfo {
  id        Int      @id @default(autoincrement())
  name      String
  rnc       String   @unique
  address   String
  phone     String
  email     String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FiscalConfig {
  id              Int      @id @default(autoincrement())
  resolutionNumber String
  resolutionDate   DateTime
  validUntil      DateTime
  ncfSeries       String
  currentSequence Int
  maxSequence     Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model InvoiceConfig {
  id                  Int      @id @default(autoincrement())
  paymentTerms        String
  latePaymentInterest Float
  itbisRate          Float
  footerNotes        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}